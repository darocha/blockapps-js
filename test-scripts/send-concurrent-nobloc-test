#!/usr/bin/env node
var Promise = require("bluebird");
var lib = require("..");
lib.handlers.enable = true;

var chalk = require('chalk')

console.log("transaction resolver")

var argv = require('minimist')(process.argv.slice(2), 
  { default: 
    { size: 100
    , nconc: 2
    , toEnabled: 0 
    , gapMS: 3000
    , strato: "http://localhost/strato-api"
    }
  }
);

var size = argv.size;
var gapMS = argv.gapMS;
var nconc = argv.nconc;
var toEnabled = argv.toEnabled;

lib.setProfile("ethereum-frontier", argv.strato);

var privkey = lib.ethbase.Crypto.PrivateKey.random();
var account = lib.ethbase.Account(privkey.toAddress());

var faucet = lib.routes.faucet(privkey.toAddress())
  .then(a => {
    console.log("Faucet called for " + a.address); return a.address})
  .then(a =>{
     account.balance.then(b => {
       console.log("balance is: " + b.toString());
     }).then(aa => {

       account.nonce.then(n => {
         console.log("current nonce: " + n);

         var toSend = [];
         for(var i = 0; i < nconc; i++){a
           toSend.push(sendBatch(n, i))
         }
    
         return Promise.all(toSend);
       })
       .then(console.log("Done!"))
     })
  });

var currentNonce = 0;
var startTime;
var batchesDispatched = 0;

var sendBatch = function(nonce, concNum){

  var c = (concNum == 0) ? chalk.green : (a=>chalk.blue('\t\t\t\t\t\t\t'+a));

  process.stdout.write(c("# Sending " + size + " transactions\n"));

  var txList = [];
  for (i = 0; i < size; ++i) {
    var tx = lib.ethbase.Transaction({nonce: nonce + 1 + i});
    tx.value = "1";
    tx.from = privkey.toAddress();
    if(toEnabled==1)
      tx.to   = "deadbeef";
    tx.sign(privkey);
    txList.push(tx);
    process.stdout.write(c("tx: " + JSON.stringify(tx) + "\n\n"));
  }

  return lib.routes.submitTransactionList(txList);
}

