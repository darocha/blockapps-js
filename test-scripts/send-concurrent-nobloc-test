#!/usr/bin/env node

var Promise = require("bluebird");
var lib = require("..");
var chalk = require('chalk')
var chai = require('chai')
var chap = require('chai-as-promised')
var mocha = require('mocha')
var rp = require('request-promise');
var _ = require('lodash')

chai.use(chap)
chai.should()

lib.handlers.enable = true;
console.log("transaction resolver")

const flatten = (ary) => ary.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), [])

var argv = require('minimist')(process.argv.slice(2), 
  { default: 
    { size: 1
    , nconc: 1
    , toEnabled: 0 
    , gapMS: 3000
    , txOffset: 0
    , throwError: 0
    , standAlone: 0
    , strato: "http://localhost/strato-api"
    }
  }
);

var size = argv.size;
var gapMS = argv.gapMS;
var nconc = argv.nconc;
var toEnabled = argv.toEnabled;
var txOffset = argv.txOffset;
var throwError = argv.throwError;

lib.setProfile("ethereum-frontier", argv.strato);

var privkey = lib.ethbase.Crypto.PrivateKey.random();
var address = privkey.toAddress();
var account = lib.ethbase.Account(privkey.toAddress());

console.log("Address is: " + address);

var insp = function(x) {
   Promise.resolve(x[0]).then(y => console.log("x[0]: " + JSON.stringify(y.txResult)))
   Promise.resolve(x[1]).then(y => console.log("x[1]: " + JSON.stringify(y.txResult)))                                    
}

var mkTxs = function(privkey, n, nonces, toAddress, value){
  var txs = [];
  nonces.map((i,j) => {
    var address = toAddress == 1 ? privkey.toAddress() : undefined; 
    var v       = value == 1     ? (""+j) : "0"
    nn = n + i
    txs.push(lib.ethbase.Transaction({nonce: nn, to: address, value: v}))
    console.log("to: " + address + "; nonce: " + nn + "; value: " + v) 
  })
  return txs.map(t => t.sign(privkey))
}

var mkTest = function(msg, privkey, nonces, toAddress, value, nres){
  it(msg + ':: should transmit ' + nonces + ' txs for address ' + privkey.toAddress() + ' dropping ' + nres + ' transaction(s)', function() {
      this.timeout(2000*nonces.length);  
      return Promise.all(lib.ethbase.Account(privkey.toAddress()).nonce.then(n => {
        console.log("nonce for " + privkey.toAddress() + " is " + n);
        return lib.routes.submitTransactionList(mkTxs(privkey, n, nonces, toAddress, value));
      })
      .tap(r => {
      //  console.log(JSON.stringify(r))
      })
      .catch(e => {
        console.log("Error: " + e)
        throw e;
      })
      .then(txs => {
        return (txs.map(t => {
          return t.txHash
            .delay(1000 + 100*nonces.length)
            .then(hash => {
              return rp({uri: argv.strato + '/eth/v1.2/transactionResult/' + hash, json: true})
                .then(json => {
                  var message = "unresolved";
                  if(json.length > 0){
                    message = json[0].message;
                    // console.log("transactionResult for " + hash + " is: " + message)
                  }
                  return {tx: hash, message: message};
                })
              })
            }))
      }))
      .then(x => {
        var res = _.filter(x, y => {
          console.log(y.tx + " : " + y.message)
          return y.message != "Success!";
        })
        return  _.size(res);
      }).should.eventually.be.equal(nres);
     
  })
}

var mkFaucet = function(privkey){
 it('should call faucet for ' + privkey.toAddress(), function(){
   return lib.routes.faucet(privkey.toAddress()).should.be.fulfilled;
 })
}

if(argv.standAlone==0){
  describe('different transaction rejection tests', __ => {
       
       // throwError=1 : should throw, occasionally
  //   for(var i = 0; i < 50; i++){
  //     it("shouldn't hit address bug " + i, function(done) {
  //       var p = lib.ethbase.Crypto.PrivateKey.random();
  //       return lib.routes.faucet(p.toAddress()).then(r => {
  //         var retAddress = r.address;
  //         console.log("address: " + retAddress)
  //         done();
  //         return new Promise(p.toAddress().toString() == retAddress);
  //       }).should.equal.true;
  //     })
  //   }
  
  // failure modes: 
  // toEnabled=1, txOffset=1 : we don't get response because TX not put in TX result
  // toEnabled=1, txOffset=1, nconc=2, size=2 : we should get one rejected (out of four)
  
    // toEnabled=1, txOffset=-1 : tx rejected (we shouldn't see timeout)
  //   it("should reject nonce to small txs", function () {
  //     return account.nonce.then(n => {
  //          var toSend = [];
  //          toSend.push(sendBatch(n, 0, 2, -1, 1))
  //          return Promise.all(toSend);
  //     }).should.eventually.be.rejected;
  //   })

    var p1 = lib.ethbase.Crypto.PrivateKey.random();
    mkFaucet(p1)
    mkTest("should do all transactions" , p1, [0,1,2,3,4,5,6], 1, 1, 0)
    
    var p2 = lib.ethbase.Crypto.PrivateKey.random();
    mkFaucet(p2)
    mkTest("should reject latter txs with nonces too low - this triggers (#138009465)", p2, [0,1,2,3,4,5,6,7,8,9,9,9,9,9], 1, 1, 4)
    

    // toEnabled=1, txOffset=0, nconc=2, size=2 
    // it("should reject two and accept two tx", function () {
    //    return account.nonce.then(n => {
    //      var p1 = sendBatch(n, 0, 2, 0, 2);
    //      var p2 = sendBatch(n, 1, 2, 0, 2);
    //     
    //      p1.then(insp)
    //      p2.then(insp)

    //      //Promise.map([p1,p2], insp) 
    //      return Promise.reduce([p1,p2], function(p){
    //        return 1 
    //      }, 0)
    //    }).tap(r => {
    //       console.log(JSON.stringify("total is " + r))
    //    }).should.eventually.equal(2);
    // })
  
    // toEnabled=1, txOffset={0,1], nconc=2, size=3 
    // it("should reject two and accept four tx", function () {
    //    return account.nonce.then(n => {
    //        var toSend = [];
    //        for(var i = 0; i < 2; i++){
    //          toSend.push(sendBatch(n, i, 2, i, 2))
    //        }
    //        toSend = flatten(toSend);
    //        console.log("4:2 : " + JSON.stringify(toSend))
    //        return Promise.reduce(toSend, function(total, p){
    //          return 1+total;
    //        }, 0);
    //    }).tap(r => {
    //       console.log(JSON.stringify("total is " + r))
    //    }).should.eventually.equal(4);
    // })
  
    // // toEnabled=1, txOffset=0, nconc=2, size=2 
    // it("should reject two and accept two tx", function () {
    //    return account.nonce.then(n => {
    //        var toSend = [];
    //        for(var i = 0; i < 2; i++){
    //          toSend.push(sendBatch(n, i, 2, 0, 2))
    //        }
    //        toSend = flatten(toSend);
    //        return Promise.reduce(toSend, function(total, p){
    //          return 1+total;
    //        }, 0);
    //    }).tap(r => {
    //       console.log(JSON.stringify("total is " + r))
    //    }).should.eventually.equal(2);
    // })


    // // toEnabled=1, txOffset=0, nconc=2, size=2 
    // it("should reject two and accept two tx", function () {
    //    return account.nonce.then(n => {
    //        var toSend = [];
    //        for(var i = 0; i < 2; i++){
    //          toSend.push(sendBatch(n, i, 2, 0, 2))
    //        }
    //        toSend = flatten(toSend);
    //        return Promise.reduce(toSend, function(total, p){
    //          return 1+total;
    //        }, 0);
    //    }).tap(r => {
    //       console.log(JSON.stringify("total is " + r))
    //    }).should.eventually.equal(2);
    // })


    // // toEnabled=1, txOffset=0, nconc=2, size=1 
    // it("should reject one and accept one tx", function () {
    //    return account.nonce.then(n => {
    //        var toSend = [];
    //        for(var i = 0; i < 2; i++){
    //          toSend.push(sendBatch(n, i, 2, 0, 1))
    //        }
    //        toSend = flatten(toSend);
    //        return Promise.reduce(toSend, function(total, p){
    //          return 1+total;
    //        }, 0);
    //    }).tap(r => {
    //       console.log(JSON.stringify("total is " + r))
    //    }).should.eventually.equal(1);
    // })


    // toEnabled=0, txOffset=1 : crash the VM, occasionally
    // it("shouldn't stop with the to=undefined bug", function (){
    //    return account.nonce.then(n => {
    //        var toSend = [];
    //        for(var i = 0; i < 2; i++){
    //          toSend.push(sendBatch(n, i, 0, 1, 2))
    //        }
    //        return Promise.all(toSend);
    //    }).tap(r => {
    //       console.log(JSON.stringify(r))
    //    }).should.eventually.be.fulfilled;
    // })
  })
} else {

var faucet = lib.routes.faucet(lib.ethbase.Address(address))
  .then(ret => {
    console.log("Faucet called for " + ret.address); 
    if(ret.address !== address.toString())
      if(throwError==1)
        throw Error("hit the address serialization bug")
      else
        console.log("hit the address serialization bug")
    return ret.address;
  })
  .then(a =>{
     account.balance.then(b => {
       console.log("balance is: " + b.toString());
     }).then(aa => {

       account.nonce.then(n => {
         console.log("current nonce: " + n);

         var toSend = [];
         for(var i = 0; i < nconc; i++){
           toSend.push(sendBatch(n, i, toEnabled, txOffset, size))
         }
    
         return Promise.all(toSend);
       })
       .then(r => {
         //console.log(r[0].address);
         var x = JSON.stringify(r)
         console.log("Done..")
       })
       .then(console.log("Done!"))
     })
  });
}
var currentNonce = 0;
var startTime;
var batchesDispatched = 0;

var sendBatch = function(nonce, concNum, toEnabled, txOffset, size){

  var c = (concNum == 0) ? chalk.green : (a => chalk.blue('\t\t\t\t\t\t\t'+a));

  process.stdout.write(c("# Sending " + size + " transactions\n"));

  var txList = [];
  for (i = 0; i < size; ++i) {
    var tx = lib.ethbase.Transaction({nonce: nonce + i + txOffset});
    tx.value = "0";
    if(toEnabled==1)
      tx.to   = lib.ethbase.Crypto.PrivateKey.random().toAddress();
    if(toEnabled==2)
      tx.to   = address;
    console.log("tx.to is: " + tx.to)
    console.log("that's " + tx.to.length + " bytes")
    console.log("that's " + tx.to.toString().length + " chars")
    tx.sign(privkey);
    txList.push(tx);
    //tx.send(privkey).then(r => {
    //  console.log("Result: " + JSON.stringify(r))
    //})
    process.stdout.write(c("tx: " + JSON.stringify(tx) + "\n\n"));
  }

  //return lib.ethbase.Transaction.sendList(txList, privkey)
  return lib.routes.submitTransactionList(txList);
}

